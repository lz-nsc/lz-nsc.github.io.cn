<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lynn&#39;s Blog</title>
  
  
  <link href="http://lzreload.com/atom.xml" rel="self"/>
  
  <link href="http://lzreload.com/"/>
  <updated>2022-09-16T11:00:08.887Z</updated>
  <id>http://lzreload.com/</id>
  
  <author>
    <name>Lynn Zhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker-NetWork-1</title>
    <link href="http://lzreload.com/2022/09/16/Docker-NetWork-1/"/>
    <id>http://lzreload.com/2022/09/16/Docker-NetWork-1/</id>
    <published>2022-09-16T10:40:25.000Z</published>
    <updated>2022-09-16T11:00:08.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="About-Docker-network-Part-1"><a href="#About-Docker-network-Part-1" class="headerlink" title="About Docker network - Part 1"></a>About Docker network - Part 1</h1><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>According to docker’s official document, docker’s networking subsystem(libnetwork) is portable, it’s using driver to provide networking functionality. Currently, these drivers exist by default:</p><ul><li>bridge</li><li>host</li><li>overlay</li><li>ipvlan</li><li>macvlan</li></ul><p>If we use <code>docker network ls</code> command to list networks offered by docker by default we can see:</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">$ docker network lsNETWORK ID     NAME      DRIVER    SCOPE2fd34f93b369   bridge    bridge    local8e489d56f4d5   host      host      local2f7960394c0f   none      null      local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>None</code>, <code>host</code>, and <code>bridge</code> network are created by default once docker starts. <code>host</code> and <code>bridge</code> network is using <code>host</code> and <code>bridge</code> driver respectively mentioned above while <code>none</code> network is created without network driver. These three networks will be discussed in this article mainly about how containers will act when they are connected to different networks.</p><h1 id="None"><a href="#None" class="headerlink" title="None"></a>None</h1><p>Containers that are connected to <code>none</code> ****network will not have an external network interface:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Create a container with `none` network mode </span>$ docker run --rm -dit --network none --name no-net-alpine alpine:latest ash<span class="token comment"># Check container's network</span>$ docker <span class="token builtin class-name">exec</span> no-net-alpine <span class="token function">ip</span> <span class="token function">link</span> show<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Container with this mode of networking will only have a loopback interface, which means that it’s unable to send messages to other containers or external networks.</p><h1 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h1><p>Before we create a new container, we can inspect the network interface of the host first:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Local host</span>$ <span class="token function">ifconfig</span>docker0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">409</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,BROADCAST,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">172.17</span>.0.1  netmask <span class="token number">255.255</span>.0.0  broadcast <span class="token number">172.17</span>.255.255<span class="token punctuation">..</span>.ens192: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span><span class="token punctuation">..</span>.lo: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,LOOPBACK,RUNNING<span class="token operator">></span>  mtu <span class="token number">65536</span>        inet <span class="token number">127.0</span>.0.1  netmask <span class="token number">255.0</span>.0.0<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then, let’s create a new container and connect it to the <code>host</code> network:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Create a new container with host network mode</span>$ docker run --rm -dit --network <span class="token function">host</span> --name host-alpine alpine:latest ash<span class="token comment"># Access to new container</span>$ docker <span class="token builtin class-name">exec</span> -it host-alpine /bin/sh<span class="token comment"># Container host-alpine</span>$ <span class="token function">ifconfig</span>docker0   Link encap:Ethernet  HWaddr 02:42:D3:3C:90:82            inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0<span class="token punctuation">..</span>.ens192    Link encap:Ethernet  HWaddr 00:50:56:BA:06:B7  <span class="token punctuation">..</span>.lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>According to the container shown above, we can observe that this new container has exact same network interfaces as the host which means that, it shares the host’s networking namespaces.</p><p>We can just consider it a normal app running on our computer. For example, we can also create an Nginx container with <code>host</code> network:</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># Host (No need to add --p to expose port 80 when using host network)</span>$ docker run --rm -d --network host --name my_nginx nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Then we can try to sent request to Nginx from Container host-alpine:</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># Access previous host container(host-alpine)</span>$ docker exec -it host-alpine /bin/sh<span class="token comment"># Container host-alpine</span>$ curl localhost:80&lt;!DOCTYPE html>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Since container <code>my_nginx</code> and <code>host-alpine</code> are all connecting to <code>host</code> network, they all share the host’s network namespace, so that <code>host-alpine</code> can directly use <code>localhost:80</code> to send requests to <code>my_nginx</code>.</p><h1 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h1><h2 id="About-Bridge-mode"><a href="#About-Bridge-mode" class="headerlink" title="About Bridge mode"></a>About Bridge mode</h2><p><code>Bridge</code> is the default network driver of docker. </p><p>When we talk about <code>bridge network</code>, we are talking about a Link Layer device(a hardware device or a software device) that forwards traffic between network segments.</p><p>In <code>Docker</code>, a software bridge is used for containers to connect to the same bridge network in order to communicate with each other.</p><p>Before we start to create a container with <code>bridge</code> network type, we can check the initial state of our local environment first:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Inspect the ethernet bridge configuration</span>$ brctl showbridge name     bridge <span class="token function">id</span>               STP enabled     interfacesdocker0         <span class="token number">8000</span>.02428ab4554d       no$ <span class="token function">ip</span> <span class="token function">link</span> show<span class="token punctuation">..</span>.<span class="token number">3</span>: docker0: <span class="token operator">&lt;</span>NO-CARRIER,BROADCAST,MULTICAST,UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state DOWN mode DEFAULT group default     link/ether 02:42:8a:b4:55:4d brd ff:ff:ff:ff:ff:ff<span class="token punctuation">..</span>.<span class="token comment"># Show IP routing table</span>$ route -nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface<span class="token number">0.0</span>.0.0         <span class="token number">10.103</span>.226.1    <span class="token number">0.0</span>.0.0         UG    <span class="token number">100</span>    <span class="token number">0</span>        <span class="token number">0</span> ens192<span class="token number">10.103</span>.226.0    <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.255.0   U     <span class="token number">100</span>    <span class="token number">0</span>        <span class="token number">0</span> ens192<span class="token number">172.17</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> docker0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Create-container-with-bridge-mode-default"><a href="#Create-container-with-bridge-mode-default" class="headerlink" title="Create container with bridge mode(default):"></a>Create container with bridge mode(default):</h2><p>Then we can start to create a container:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Create a container with `bridge` network type</span>$ docker run --rm -dit --name bridge-alpine alpine ash<span class="token comment"># Check ips of container</span>$ docker <span class="token builtin class-name">exec</span> bridge-alpine <span class="token function">ip</span> addr<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever<span class="token number">7</span>: eth0@if8: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff    inet <span class="token number">172.17</span>.0.2/16 brd <span class="token number">172.17</span>.255.255 scope global eth0       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Compared to the previous container with <code>none</code> network mode, this new container has one more network interface <code>eth0</code> and got an ip <code>172.17.0.2</code>.</p><p>Then we can check the network state of the current environment:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Inspect the ethernet bridge configuration</span>$ brctl showbridge name     bridge <span class="token function">id</span>               STP enabled     interfacesdocker0         <span class="token number">8000</span>.0242a1f90aad       no              veth80ec58c$ <span class="token function">ip</span> <span class="token function">link</span> show<span class="token punctuation">..</span>.<span class="token number">3</span>: docker0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP mode DEFAULT group default     link/ether 02:42:8a:b4:55:4d brd ff:ff:ff:ff:ff:ff<span class="token number">8</span>: veth80ec58c@if7: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue master docker0 state UP mode DEFAULT group default     link/ether 0e:e2:2d:20:d2:ad brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Apparently, now that there’s a new interface <code>veth80ec58c</code> who is connecting to docker0. And also this new interface(<code>veth80ec58c</code>) and <code>interface 7</code> (shown in the container as interface <code>eth0</code>) are two connected endpoints of a <code>veth pair</code> that act as tunnels between network namespaces.</p><p><img src="/img/docker_bridge.png" alt="docker_bridge.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/docker_bridge.png" class="lozad post-image"></p><h2 id="Communication-between-pods"><a href="#Communication-between-pods" class="headerlink" title="Communication between pods"></a>Communication between pods</h2><p> Now that we can create another two containers <code>bridge-alpine2</code> and <code>bridge-alpine3</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Create a new container</span>$ docker run --rm -dit --name bridge-alpine2 alpine ash$ docker run --rm -dit --name bridge-alpine3 alpine ash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Then we can observe that there’re two new interfaces that are connecting to docker0:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ brctl show                    bridge name     bridge <span class="token function">id</span>       STP enabled       interfacesdocker0         <span class="token number">8000</span>.0242a1f90aad       no       veth4a318ba                                                 veth80ec58c                                                 vethd234967<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> We are going to ping container <code>bridge-alpine</code> from container <code>bridge-alpine2</code> using its IP (<code>172.17.0.2</code>) to observe the communication between pods.:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker <span class="token builtin class-name">exec</span> -it bridge-alpine2 /bin/sh<span class="token comment"># Inside container bridge-alpine2(172.17.0.3)</span>$ <span class="token function">ping</span> <span class="token number">172.17</span>.0.2PING <span class="token number">172.17</span>.0.2 <span class="token punctuation">(</span><span class="token number">172.17</span>.0.2<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes<span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.333</span> ms<span class="token number">64</span> bytes from <span class="token number">172.17</span>.0.2: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.151</span> ms<span class="token comment"># Host</span><span class="token comment"># Capture package from docker0</span>$ tcpdump -i docker0 -v -nn -e -ttcpdump: listening on docker0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes02:42:ac:11:00:03 <span class="token operator">></span> **ff:ff:ff:ff:ff:ff**, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Request who-has <span class="token number">172.17</span>.0.2 tell <span class="token number">172.17</span>.0.3, length <span class="token number">28</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Reply <span class="token number">172.17</span>.0.2 is-at 02:42:ac:11:00:02, length <span class="token number">28</span>02:42:ac:11:00:03 <span class="token operator">></span> 02:42:ac:11:00:02, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">7910</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.3 <span class="token operator">></span> <span class="token number">172.17</span>.0.2: ICMP <span class="token builtin class-name">echo</span> request, <span class="token function">id</span> <span class="token number">16</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">59835</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2 <span class="token operator">></span> <span class="token number">172.17</span>.0.3: ICMP <span class="token builtin class-name">echo</span> reply, <span class="token function">id</span> <span class="token number">16</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span>02:42:ac:11:00:03 <span class="token operator">></span> 02:42:ac:11:00:02, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">7986</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span><span class="token comment"># Container bridge-alpine2</span>$ tcpdump -i veth4a318ba -v -nn -e -t02:42:ac:11:00:03 <span class="token operator">></span> ff:ff:ff:ff:ff:ff, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Request who-has <span class="token number">172.17</span>.0.2 tell <span class="token number">172.17</span>.0.3, length <span class="token number">28</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Reply <span class="token number">172.17</span>.0.2 is-at 02:42:ac:11:00:02, length <span class="token number">28</span>02:42:ac:11:00:03 <span class="token operator">></span> 02:42:ac:11:00:02, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">56762</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.3 <span class="token operator">></span> <span class="token number">172.17</span>.0.2: ICMP <span class="token builtin class-name">echo</span> request, <span class="token function">id</span> <span class="token number">17</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">55430</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2 <span class="token operator">></span> <span class="token number">172.17</span>.0.3: ICMP <span class="token builtin class-name">echo</span> reply, <span class="token function">id</span> <span class="token number">17</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span><span class="token comment"># Container bridge-alpine</span>$ tcpdump -i veth80ec58c -v -nn -e -ttcpdump: listening on veth80ec58c, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes02:42:ac:11:00:03 <span class="token operator">></span> ff:ff:ff:ff:ff:ff, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Request who-has <span class="token number">172.17</span>.0.2 tell <span class="token number">172.17</span>.0.3, length <span class="token number">28</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Reply <span class="token number">172.17</span>.0.2 is-at 02:42:ac:11:00:02, length <span class="token number">28</span>02:42:ac:11:00:03 <span class="token operator">></span> 02:42:ac:11:00:02, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">7910</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.3 <span class="token operator">></span> <span class="token number">172.17</span>.0.2: ICMP <span class="token builtin class-name">echo</span> request, <span class="token function">id</span> <span class="token number">16</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">59835</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2 <span class="token operator">></span> <span class="token number">172.17</span>.0.3: ICMP <span class="token builtin class-name">echo</span> reply, <span class="token function">id</span> <span class="token number">16</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span><span class="token comment"># Container bridge-alpine3</span>$ tcpdump -i vethd234967 -v -nn -e -ttcpdump: listening on vethd234967, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size <span class="token number">262144</span> bytes02:42:ac:11:00:03 <span class="token operator">></span> ff:ff:ff:ff:ff:ff, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Request who-has <span class="token number">172.17</span>.0.2 tell <span class="token number">172.17</span>.0.3, length <span class="token number">28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Network-traffic-analysis"><a href="#Network-traffic-analysis" class="headerlink" title="Network traffic analysis"></a>Network traffic analysis</h3><p>According to the results that are shown above, the process is a bit different:</p><ol><li><strong>Use ARP to get the MAC address of the target container：</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># bridge-alpine2 container</span>$ route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface<span class="token number">0.0</span>.0.0         <span class="token number">172.17</span>.0.1      <span class="token number">0.0</span>.0.0         UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span class="token number">172.17</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>According to the IP routing table of container bridge-alpine2 shown above, when the container wants to ping another container in the same subnet(172.17.0.0/16), the message can be directly sent to them, instead of being sent to the gateway. But it needs to know the MAC address of the target container first.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># bridge-alpine2's packages</span>02:42:ac:11:00:03 <span class="token operator">></span> ff:ff:ff:ff:ff:ff, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Request who-has <span class="token number">172.17</span>.0.2 tell <span class="token number">172.17</span>.0.3, length <span class="token number">28</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Reply <span class="token number">172.17</span>.0.2 is-at 02:42:ac:11:00:02, length <span class="token number">28</span><span class="token comment"># docker0's packcages </span>02:42:ac:11:00:03 <span class="token operator">></span> **ff:ff:ff:ff:ff:ff**, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Request who-has <span class="token number">172.17</span>.0.2 tell <span class="token number">172.17</span>.0.3, length <span class="token number">28</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Reply <span class="token number">172.17</span>.0.2 is-at 02:42:ac:11:00:02, length <span class="token number">28</span><span class="token comment"># bridge-alpine's packages</span>02:42:ac:11:00:03 <span class="token operator">></span> **ff:ff:ff:ff:ff:ff**, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Request who-has <span class="token number">172.17</span>.0.2 tell <span class="token number">172.17</span>.0.3, length <span class="token number">28</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Reply <span class="token number">172.17</span>.0.2 is-at 02:42:ac:11:00:02, length <span class="token number">28</span><span class="token comment"># bridge-alpine3's packages</span>02:42:ac:11:00:03 <span class="token operator">></span> **ff:ff:ff:ff:ff:ff**, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Request who-has <span class="token number">172.17</span>.0.2 tell <span class="token number">172.17</span>.0.3, length <span class="token number">28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So, from the content shown above, we can observe that the container broadcasted the ARP message using the broadcast MAC address(<strong>ff:ff:ff:ff:ff:ff</strong>). ARP request will be sent to all the containers which are connecting to docker0, but only the target container bridge-alpine(172.17.0.2) replied with its MAC address(02:42:ac:11:00:02).</p><ol><li><strong>Send packages (ICMP)</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># bridge-alpine2's packages</span>02:42:ac:11:00:03 <span class="token operator">></span> 02:42:ac:11:00:02, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">56762</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.3 <span class="token operator">></span> <span class="token number">172.17</span>.0.2: ICMP <span class="token builtin class-name">echo</span> request, <span class="token function">id</span> <span class="token number">17</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">55430</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2 <span class="token operator">></span> <span class="token number">172.17</span>.0.3: ICMP <span class="token builtin class-name">echo</span> reply, <span class="token function">id</span> <span class="token number">17</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span><span class="token comment"># docker0's packages</span>02:42:ac:11:00:03 <span class="token operator">></span> 02:42:ac:11:00:02, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">7910</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.3 <span class="token operator">></span> <span class="token number">172.17</span>.0.2: ICMP <span class="token builtin class-name">echo</span> request, <span class="token function">id</span> <span class="token number">16</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">59835</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2 <span class="token operator">></span> <span class="token number">172.17</span>.0.3: ICMP <span class="token builtin class-name">echo</span> reply, <span class="token function">id</span> <span class="token number">16</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span><span class="token comment"># bridge-alpine's packages</span>02:42:ac:11:00:03 <span class="token operator">></span> 02:42:ac:11:00:02, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">7910</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.3 <span class="token operator">></span> <span class="token number">172.17</span>.0.2: ICMP <span class="token builtin class-name">echo</span> request, <span class="token function">id</span> <span class="token number">16</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span>02:42:ac:11:00:02 <span class="token operator">></span> 02:42:ac:11:00:03, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">59835</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2 <span class="token operator">></span> <span class="token number">172.17</span>.0.3: ICMP <span class="token builtin class-name">echo</span> reply, <span class="token function">id</span> <span class="token number">16</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>With the IP and MAC address, now container bridge-alpine2 can start to send IMCP messages to container bridge-alpine:</p><p><img src="/img/docker_bridge_internal.png" alt="docker_bridge_internal.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/docker_bridge_internal.png" class="lozad post-image"></p><h2 id="Communicate-with-external-network"><a href="#Communicate-with-external-network" class="headerlink" title="Communicate with external network"></a>Communicate with external network</h2><p>Let’s see what will happen if this container tries to access an <code>external network</code>. The original state of the local environment is shown below:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Show the system ARP cache </span>$ arp -vAddress                  HWtype  HWaddress           Flags Mask            Ifacegateway                  ether   <span class="token number">70</span>:db:98:82:a1:c0   C                     ens192<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Container bridge-alpine2 and bridge-alpine3 have been removed from the local host.</p><p>We can ping a website from a container and use <code>tcpdump</code> to catch the packets during this process:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ping a website from container with bridge network type</span>$ docker <span class="token builtin class-name">exec</span> bridge-alpine <span class="token function">ping</span> www.baidu.comPING www.baidu.com <span class="token punctuation">(</span><span class="token number">103.235</span>.46.40<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes<span class="token number">64</span> bytes from <span class="token number">103.235</span>.46.40: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">40</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">186.518</span> ms<span class="token number">64</span> bytes from <span class="token number">103.235</span>.46.40: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">40</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">187.523</span> ms<span class="token punctuation">..</span>.<span class="token comment"># Get packets from one of the endpoints of the veth pairs which connects </span><span class="token comment"># container's network namespace and docker0</span>$ tcpdump -i veth80ec58c -v -nn -e02:42:ac:11:00:02 <span class="token operator">></span> 02:42:a1:f9:0a:ad, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Request who-has **172.17.0.1** tell <span class="token number">172.17</span>.0.2, length <span class="token number">28</span>02:42:a1:f9:0a:ad <span class="token operator">></span> 02:42:ac:11:00:02, ethertype ARP <span class="token punctuation">(</span>0x0806<span class="token punctuation">)</span>, length <span class="token number">42</span>: Ethernet <span class="token punctuation">(</span>len <span class="token number">6</span><span class="token punctuation">)</span>, IPv4 <span class="token punctuation">(</span>len <span class="token number">4</span><span class="token punctuation">)</span>, Reply <span class="token number">172.17</span>.0.1 is-at **02:42:a1:f9:0a:ad**, length <span class="token number">2806</span>:38:42.580163 ARP, Reply localhost.localdomain is-at 02:42:8a:b4:55:4d <span class="token punctuation">(</span>oui Unknown<span class="token punctuation">)</span>, length <span class="token number">28</span>02:42:ac:11:00:02 <span class="token operator">></span> **02:42:a1:f9:0a:ad**, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">73</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">46041</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>, length <span class="token number">59</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2.37221 <span class="token operator">></span> <span class="token number">8.8</span>.8.8.53: <span class="token number">28492</span>+ A? www.baidu.com. <span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span>02:42:ac:11:00:02 <span class="token operator">></span> **02:42:a1:f9:0a:ad**, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">73</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">53494</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>, length <span class="token number">59</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2.37221 <span class="token operator">></span> <span class="token number">8.8</span>.4.4.53: <span class="token number">28492</span>+ A? www.baidu.com. <span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span>02:42:ac:11:00:02 <span class="token operator">></span> **02:42:a1:f9:0a:ad**, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">73</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">46042</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>, length <span class="token number">59</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2.37221 <span class="token operator">></span> <span class="token number">8.8</span>.8.8.53: <span class="token number">29411</span>+ AAAA? www.baidu.com. <span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span>02:42:ac:11:00:02 <span class="token operator">></span> **02:42:a1:f9:0a:ad**, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">73</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">53495</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>, length <span class="token number">59</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2.37221 <span class="token operator">></span> <span class="token number">8.8</span>.4.4.53: <span class="token number">29411</span>+ AAAA? www.baidu.com. <span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span>**02:42:a1:f9:0a:ad** <span class="token operator">></span> 02:42:ac:11:00:02, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">132</span>: <span class="token punctuation">(</span>tos 0x20, ttl <span class="token number">101</span>, <span class="token function">id</span> <span class="token number">57650</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>, length <span class="token number">118</span><span class="token punctuation">)</span>    <span class="token number">8.8</span>.8.8.53 <span class="token operator">></span> <span class="token number">172.17</span>.0.2.37221: <span class="token number">28492</span> <span class="token number">3</span>/0/0 www.baidu.com. CNAME www.a.shifen.com., www.a.shifen.com. A <span class="token number">14.215</span>.177.38, www.a.shifen.com. A <span class="token number">14.215</span>.177.39 <span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>**02:42:a1:f9:0a:ad** <span class="token operator">></span> 02:42:ac:11:00:02, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">157</span>: <span class="token punctuation">(</span>tos 0x20, ttl <span class="token number">101</span>, <span class="token function">id</span> <span class="token number">29948</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span>, proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span>, length <span class="token number">143</span><span class="token punctuation">)</span>    <span class="token number">8.8</span>.8.8.53 <span class="token operator">></span> <span class="token number">172.17</span>.0.2.37221: <span class="token number">29411</span> <span class="token number">1</span>/1/0 www.baidu.com. CNAME www.a.shifen.com. <span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span>02:42:ac:11:00:02 <span class="token operator">></span> **02:42:a1:f9:0a:ad**, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x0, ttl <span class="token number">64</span>, <span class="token function">id</span> <span class="token number">31149</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span>.0.2 <span class="token operator">></span> <span class="token number">14.215</span>.177.38: ICMP <span class="token builtin class-name">echo</span> request, <span class="token function">id</span> <span class="token number">69</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span>**02:42:a1:f9:0a:ad** <span class="token operator">></span> 02:42:ac:11:00:02, ethertype IPv4 <span class="token punctuation">(</span>0x0800<span class="token punctuation">)</span>, length <span class="token number">98</span>: <span class="token punctuation">(</span>tos 0x20, ttl <span class="token number">51</span>, <span class="token function">id</span> <span class="token number">31149</span>, offset <span class="token number">0</span>, flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span>, proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>, length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">14.215</span>.177.38 <span class="token operator">></span> <span class="token number">172.17</span>.0.2: ICMP <span class="token builtin class-name">echo</span> reply, <span class="token function">id</span> <span class="token number">69</span>, <span class="token function">seq</span> <span class="token number">0</span>, length <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Network-traffic-analysis-1"><a href="#Network-traffic-analysis-1" class="headerlink" title="Network traffic analysis"></a>Network traffic analysis</h3><p>There’re several steps shown in this process, let’s go through them one by one:</p><ol><li><strong>Use ARP to get the MAC address of the gateway：</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># bridge-alpine container</span>$ route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface<span class="token number">0.0</span>.0.0         <span class="token number">172.17</span>.0.1      <span class="token number">0.0</span>.0.0         UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span class="token number">172.17</span>.0.0      <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.0.0     U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Different from communicating with containers also connecting to docker0, Both DNS/ICMP messages need to be sent to external networks. In this case, according to the table shown above, container bridge-alpine should directly send messages to the gateway(172.17.0.1)</p><p>Somehow knowing the IP of the gateway is not enough for the packages to be delivered, they need the MAC address as well, so that the container used <code>ARP</code> to ask for the <code>MAC address</code> of the gateway(do not need to board cast):</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>ac<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">02</span> <span class="token operator">></span> <span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad<span class="token punctuation">,</span> ethertype ARP <span class="token punctuation">(</span><span class="token number">0x0806</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">42</span><span class="token punctuation">:</span> Ethernet <span class="token punctuation">(</span><span class="token builtin">len</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> IPv4 <span class="token punctuation">(</span><span class="token builtin">len</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Request who<span class="token operator">-</span>has <span class="token operator">*</span><span class="token operator">*</span><span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">*</span><span class="token operator">*</span> tell <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span><span class="token punctuation">,</span> length <span class="token number">28</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad <span class="token operator">></span> <span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>ac<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">,</span> ethertype ARP <span class="token punctuation">(</span><span class="token number">0x0806</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">42</span><span class="token punctuation">:</span> Ethernet <span class="token punctuation">(</span><span class="token builtin">len</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> IPv4 <span class="token punctuation">(</span><span class="token builtin">len</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Reply <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span> is<span class="token operator">-</span>at <span class="token operator">*</span><span class="token operator">*</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> length <span class="token number">2806</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">42.580163</span> ARP<span class="token punctuation">,</span> Reply localhost<span class="token punctuation">.</span>localdomain is<span class="token operator">-</span>at <span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span><span class="token number">8</span>a<span class="token punctuation">:</span>b4<span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">4</span>d <span class="token punctuation">(</span>oui Unknown<span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>According to what we’ve got previously, the MAC address <code>02:42:a1:f9:0a:ad</code> the container got from ARP is the MAC address of docker0 on the host computer:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ ip link show<span class="token operator">...</span><span class="token number">3</span><span class="token punctuation">:</span> docker0<span class="token punctuation">:</span> <span class="token operator">&lt;</span>NO<span class="token operator">-</span>CARRIER<span class="token punctuation">,</span>BROADCAST<span class="token punctuation">,</span>MULTICAST<span class="token punctuation">,</span>UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state DOWN mode DEFAULT group <span class="token keyword">default</span>     link<span class="token operator">/</span>ether <span class="token operator">*</span><span class="token operator">*</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span><span class="token number">8</span>a<span class="token punctuation">:</span>b4<span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">4</span>d<span class="token operator">*</span><span class="token operator">*</span> brd ff<span class="token punctuation">:</span>ff<span class="token punctuation">:</span>ff<span class="token punctuation">:</span>ff<span class="token punctuation">:</span>ff<span class="token punctuation">:</span>ff<span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>Resolve domain name (DNS)：</strong></li></ol><p>Also, the container needs to know the IP address of the target website, so that it will ask the name server(8.8.8.8) in order to resolve the domain name:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>ac<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">02</span> <span class="token operator">></span> <span class="token operator">*</span><span class="token operator">*</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> ethertype IPv4 <span class="token punctuation">(</span><span class="token number">0x0800</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">73</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>tos <span class="token number">0x0</span><span class="token punctuation">,</span> ttl <span class="token number">64</span><span class="token punctuation">,</span> id <span class="token number">46041</span><span class="token punctuation">,</span> offset <span class="token number">0</span><span class="token punctuation">,</span> flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span><span class="token punctuation">,</span> proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">59</span><span class="token punctuation">)</span>    <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span><span class="token number">.37221</span> <span class="token operator">></span> <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token number">.53</span><span class="token punctuation">:</span> <span class="token number">28492</span><span class="token operator">+</span> A? www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>ac<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">02</span> <span class="token operator">></span> <span class="token operator">*</span><span class="token operator">*</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> ethertype IPv4 <span class="token punctuation">(</span><span class="token number">0x0800</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">73</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>tos <span class="token number">0x0</span><span class="token punctuation">,</span> ttl <span class="token number">64</span><span class="token punctuation">,</span> id <span class="token number">53494</span><span class="token punctuation">,</span> offset <span class="token number">0</span><span class="token punctuation">,</span> flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span><span class="token punctuation">,</span> proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">59</span><span class="token punctuation">)</span>    <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span><span class="token number">.37221</span> <span class="token operator">></span> <span class="token number">8.8</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.53</span><span class="token punctuation">:</span> <span class="token number">28492</span><span class="token operator">+</span> A? www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>ac<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">02</span> <span class="token operator">></span> <span class="token operator">*</span><span class="token operator">*</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> ethertype IPv4 <span class="token punctuation">(</span><span class="token number">0x0800</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">73</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>tos <span class="token number">0x0</span><span class="token punctuation">,</span> ttl <span class="token number">64</span><span class="token punctuation">,</span> id <span class="token number">46042</span><span class="token punctuation">,</span> offset <span class="token number">0</span><span class="token punctuation">,</span> flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span><span class="token punctuation">,</span> proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">59</span><span class="token punctuation">)</span>    <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span><span class="token number">.37221</span> <span class="token operator">></span> <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token number">.53</span><span class="token punctuation">:</span> <span class="token number">29411</span><span class="token operator">+</span> AAAA? www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>ac<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">02</span> <span class="token operator">></span> <span class="token operator">*</span><span class="token operator">*</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> ethertype IPv4 <span class="token punctuation">(</span><span class="token number">0x0800</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">73</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>tos <span class="token number">0x0</span><span class="token punctuation">,</span> ttl <span class="token number">64</span><span class="token punctuation">,</span> id <span class="token number">53495</span><span class="token punctuation">,</span> offset <span class="token number">0</span><span class="token punctuation">,</span> flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span><span class="token punctuation">,</span> proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">59</span><span class="token punctuation">)</span>    <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span><span class="token number">.37221</span> <span class="token operator">></span> <span class="token number">8.8</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.53</span><span class="token punctuation">:</span> <span class="token number">29411</span><span class="token operator">+</span> AAAA? www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">></span> <span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>ac<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">,</span> ethertype IPv4 <span class="token punctuation">(</span><span class="token number">0x0800</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">132</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>tos <span class="token number">0x20</span><span class="token punctuation">,</span> ttl <span class="token number">101</span><span class="token punctuation">,</span> id <span class="token number">57650</span><span class="token punctuation">,</span> offset <span class="token number">0</span><span class="token punctuation">,</span> flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span><span class="token punctuation">,</span> proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">118</span><span class="token punctuation">)</span>    <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token number">.53</span> <span class="token operator">></span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span><span class="token number">.37221</span><span class="token punctuation">:</span> <span class="token number">28492</span> <span class="token number">3</span><span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span> www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">.</span> CNAME www<span class="token punctuation">.</span>a<span class="token punctuation">.</span>shifen<span class="token punctuation">.</span>com<span class="token punctuation">.</span><span class="token punctuation">,</span> www<span class="token punctuation">.</span>a<span class="token punctuation">.</span>shifen<span class="token punctuation">.</span>com<span class="token punctuation">.</span> A <span class="token number">14.215</span><span class="token number">.177</span><span class="token number">.38</span><span class="token punctuation">,</span> www<span class="token punctuation">.</span>a<span class="token punctuation">.</span>shifen<span class="token punctuation">.</span>com<span class="token punctuation">.</span> A <span class="token number">14.215</span><span class="token number">.177</span><span class="token number">.39</span> <span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">></span> <span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>ac<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">,</span> ethertype IPv4 <span class="token punctuation">(</span><span class="token number">0x0800</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">157</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>tos <span class="token number">0x20</span><span class="token punctuation">,</span> ttl <span class="token number">101</span><span class="token punctuation">,</span> id <span class="token number">29948</span><span class="token punctuation">,</span> offset <span class="token number">0</span><span class="token punctuation">,</span> flags <span class="token punctuation">[</span>none<span class="token punctuation">]</span><span class="token punctuation">,</span> proto UDP <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">143</span><span class="token punctuation">)</span>    <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token number">.53</span> <span class="token operator">></span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span><span class="token number">.37221</span><span class="token punctuation">:</span> <span class="token number">29411</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span> www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">.</span> CNAME www<span class="token punctuation">.</span>a<span class="token punctuation">.</span>shifen<span class="token punctuation">.</span>com<span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>I’m not going to talk about the detail of DNS in this article. We only need to know that eventually, the container knew that the target IP is <code>14.215.177.38</code>.</p><ol><li><strong>Send packages (ICMP):</strong></li></ol><p>Now that the container’s already got the IP address of the target website and the MAC address of the gateway, it can send all the ICMP packages now:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>ac<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">02</span> <span class="token operator">></span> <span class="token operator">*</span><span class="token operator">*</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> ethertype IPv4 <span class="token punctuation">(</span><span class="token number">0x0800</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">98</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>tos <span class="token number">0x0</span><span class="token punctuation">,</span> ttl <span class="token number">64</span><span class="token punctuation">,</span> id <span class="token number">31149</span><span class="token punctuation">,</span> offset <span class="token number">0</span><span class="token punctuation">,</span> flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span><span class="token punctuation">,</span> proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span> <span class="token operator">></span> <span class="token number">14.215</span><span class="token number">.177</span><span class="token number">.38</span><span class="token punctuation">:</span> ICMP echo request<span class="token punctuation">,</span> id <span class="token number">69</span><span class="token punctuation">,</span> seq <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token number">64</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>f9<span class="token punctuation">:</span><span class="token number">0</span>a<span class="token punctuation">:</span>ad<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">></span> <span class="token number">02</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span>ac<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">,</span> ethertype IPv4 <span class="token punctuation">(</span><span class="token number">0x0800</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">98</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>tos <span class="token number">0x20</span><span class="token punctuation">,</span> ttl <span class="token number">51</span><span class="token punctuation">,</span> id <span class="token number">31149</span><span class="token punctuation">,</span> offset <span class="token number">0</span><span class="token punctuation">,</span> flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span><span class="token punctuation">,</span> proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">14.215</span><span class="token number">.177</span><span class="token number">.38</span> <span class="token operator">></span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span><span class="token punctuation">:</span> ICMP echo reply<span class="token punctuation">,</span> id <span class="token number">69</span><span class="token punctuation">,</span> seq <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>If we also use <code>tcpdump</code> to catch the package from ens192, we will get these contents:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ tcpdump <span class="token operator">-</span>i ens192 <span class="token operator">-</span>v <span class="token operator">-</span>nn <span class="token operator">-</span>e <span class="token operator">-</span>t host <span class="token number">14.215</span><span class="token number">.177</span><span class="token number">.38</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span>ba<span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span>b7 <span class="token operator">></span> <span class="token number">70</span><span class="token punctuation">:</span>db<span class="token punctuation">:</span><span class="token number">98</span><span class="token punctuation">:</span><span class="token number">82</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>c0<span class="token punctuation">,</span> ethertype IPv4 <span class="token punctuation">(</span><span class="token number">0x0800</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">98</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>tos <span class="token number">0x0</span><span class="token punctuation">,</span> ttl <span class="token number">63</span><span class="token punctuation">,</span> id <span class="token number">13766</span><span class="token punctuation">,</span> offset <span class="token number">0</span><span class="token punctuation">,</span> flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span><span class="token punctuation">,</span> proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">10.103</span><span class="token number">.80</span><span class="token number">.33</span> <span class="token operator">></span> <span class="token number">14.215</span><span class="token number">.177</span><span class="token number">.38</span><span class="token punctuation">:</span> ICMP echo request<span class="token punctuation">,</span> id <span class="token number">113</span><span class="token punctuation">,</span> seq <span class="token number">20</span><span class="token punctuation">,</span> length <span class="token number">64</span><span class="token number">70</span><span class="token punctuation">:</span>db<span class="token punctuation">:</span><span class="token number">98</span><span class="token punctuation">:</span><span class="token number">82</span><span class="token punctuation">:</span>a1<span class="token punctuation">:</span>c0 <span class="token operator">></span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span>ba<span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span>b7<span class="token punctuation">,</span> ethertype IPv4 <span class="token punctuation">(</span><span class="token number">0x0800</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">98</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>tos <span class="token number">0x20</span><span class="token punctuation">,</span> ttl <span class="token number">41</span><span class="token punctuation">,</span> id <span class="token number">13766</span><span class="token punctuation">,</span> offset <span class="token number">0</span><span class="token punctuation">,</span> flags <span class="token punctuation">[</span>DF<span class="token punctuation">]</span><span class="token punctuation">,</span> proto ICMP <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> length <span class="token number">84</span><span class="token punctuation">)</span>    <span class="token number">45.113</span><span class="token number">.192</span><span class="token number">.101</span> <span class="token operator">></span> <span class="token number">10.103</span><span class="token number">.80</span><span class="token number">.33</span><span class="token punctuation">:</span> ICMP echo reply<span class="token punctuation">,</span> id <span class="token number">113</span><span class="token punctuation">,</span> seq <span class="token number">20</span><span class="token punctuation">,</span> length <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The whole process can be shown as:<br><img src="/img/docker_bridge_external.png" alt="docker_bridge_external.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/docker_bridge_external.png" class="lozad post-image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;About-Docker-network-Part-1&quot;&gt;&lt;a href=&quot;#About-Docker-network-Part-1&quot; class=&quot;headerlink&quot; title=&quot;About Docker network - Part 1&quot;&gt;&lt;/a&gt;Abo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Go: 关于heap包</title>
    <link href="http://lzreload.com/2022/04/15/Golang-Heap/"/>
    <id>http://lzreload.com/2022/04/15/Golang-Heap/</id>
    <published>2022-04-15T09:21:52.000Z</published>
    <updated>2022-04-19T09:15:19.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><code>heap</code>包中定义了接口<code>Interface</code>。这个接口里有来自<code>sort</code>包的<code>Interface</code>接口，以及<code>Push</code>和<code>Pop</code>两个方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// go1.18.1/src/container/heap/heap.go</span><span class="token keyword">package</span> heap<span class="token keyword">import</span> <span class="token string">"sort"</span><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>sort<span class="token punctuation">.</span>Interface<span class="token function">Push</span><span class="token punctuation">(</span>x any<span class="token punctuation">)</span> <span class="token comment">// add x as element Len()</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> any   <span class="token comment">// remove and return element Len() - 1.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sort</code>包中的<code>Interface</code>接口有3个方法，分别是：Len，Less 还有 Swap ：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> sort<span class="token comment">// An implementation of Interface can be sorted by the routines in this package.</span><span class="token comment">// The methods refer to elements of the underlying collection by integer index.</span><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token comment">// Len is the number of elements in the collection.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token comment">// Less reports whether the element with index i</span><span class="token comment">// must sort before the element with index j.</span><span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token comment">// Swap swaps the elements with indexes i and j.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这意味着如果我们要实现这个<code>heap</code>包的接口，那么我们定义的结构体需要实现这5个方法：Len，Less， Swap， Push还有Pop。</p><p>比如以下这个例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> MinHeap <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MinHeap<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MinHeap<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MinHeap<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MinHeap<span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>x any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>m <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">,</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MinHeap<span class="token punctuation">)</span> <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>size <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span>last <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">return</span> last<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面定义的这个叫做<code>MinHeap</code>的结构体实现了<code>heap</code>包接口<code>Interface</code>的所有方法。</p><p>现在，我们已经定义的一个实现了接口的结构体，接下来要怎么使用这个包，以及这个包是怎么工作的呢？</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>在这个包里面定义了5个函数：</p><h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><p><code>Init</code> 函数将会将提供的实现了接口的结构体构建成堆。</p><p>根据这个包里的代码，<code>Init</code> 会使用自下而上的方法在O(n)的时间复杂度下来将数组（也有可能是其他数据结构体，本文以常见的数组作为例子）构建成堆。</p><ul><li><p>它将从最后一个非叶节点开始，如果这个节点不符合这个我们定义的结构体的要求（例子中我们定义了最小堆，则要求父节点要小于其子节点），将这个节点与其最小的子节点交换。在这里它调用了我们定义的给<code>Minheap</code>结构体的<code>Less</code>和<code>Swap</code>方法来比较以及交换两个节点。</p></li><li><p>然后它将会移向下一个非叶节点并且持续交换直到整个结构体变成了符合要求的最小堆。</p></li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Init</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// heapify</span>n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">&#123;</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">down</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i0<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>i <span class="token operator">:=</span> i0<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>j1 <span class="token operator">:=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">if</span> j1 <span class="token operator">>=</span> n <span class="token operator">||</span> j1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">// j1 &lt; 0 after int overflow</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>j <span class="token operator">:=</span> j1 <span class="token comment">// left child</span><span class="token keyword">if</span> j2 <span class="token operator">:=</span> j1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j2 <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j2<span class="token punctuation">,</span> j1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>j <span class="token operator">=</span> j2 <span class="token comment">// = 2*i + 2  // right child</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>i <span class="token operator">=</span> j<span class="token punctuation">&#125;</span><span class="token keyword">return</span> i <span class="token operator">></span> i0<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用我们先前定义的<code>MinHeap</code>结构体：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[Heap] Start heap tast, creating original array ..."</span><span class="token punctuation">)</span>mh <span class="token operator">:=</span> <span class="token operator">&amp;</span>MinHeap<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Original array :%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[Heap] Start to build minHeap..."</span><span class="token punctuation">)</span>heap<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>mh<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Init</code>函数将会按照以下图示过程构建堆：</p><p><img src="/img/build_heap.png" alt="build_heap.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/build_heap.png" class="lozad post-image"></p><p>前面我们给出的实例代码的输出将会是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ go run main.go<span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Start heap tast, creating original array <span class="token punctuation">..</span>.<span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Original array :<span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">3</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Start to build minHeap<span class="token punctuation">..</span>.<span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap:<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><p><code>Pop</code> 函数会将根节点与数组中的最后一个节点交换，并且缩短数组的长度，以在后续的活动中忽略最后一个节点（也就是堆中的最小值）。</p><p>然后它会当前的根结点往下移动直到重新构建出符合要求的结构体（最小堆）。</p><p>在这之后， 这个函数将会调用我们给这个结构体定义的<code>Pop</code>方法来返回结构体中的最后一个节点，也就是最小值：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Pop removes and returns the minimum element (according to Less) from the heap.</span><span class="token comment">// The complexity is O(log n) where n = h.Len().</span><span class="token comment">// Pop is equivalent to Remove(h, 0).</span><span class="token keyword">func</span> <span class="token function">Pop</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依然是使用先前定义的 <code>MinHeap</code>结构体：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>first <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span>mh<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Pop:%d MinHeap:%v\n"</span><span class="token punctuation">,</span> first<span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Pop</code>函数将会对<code>Minheap</code>结构体进行如下操作：</p><p><img src="/img/pop_heap.png" alt="pop_heap.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/pop_heap.png" class="lozad post-image"></p><p>示例代码的输出将会是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.<span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap:<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Pop:1 MinHeap:<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><p><code>Push</code> 函数会首先调用传入的接口（<code>MinHeap</code>）的<code>Push</code>方法来将新节点放到数组的最后一个。</p><p>然后他将会持续调用接口的<code>Less</code>和<code>Swap</code>方法将新的节点向上移动，直到新的数组依旧符合<code>MinHeap</code>的要求（父节点要小于其子节点）。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Push pushes the element x onto the heap.</span><span class="token comment">// The complexity is O(log n) where n = h.Len().</span><span class="token keyword">func</span> <span class="token function">Push</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> x any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>h<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">up</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>i <span class="token operator">:=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment">// parent</span><span class="token keyword">if</span> i <span class="token operator">==</span> j <span class="token operator">||</span> <span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">Less</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span>h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>j <span class="token operator">=</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用我们先前定义的<code>MinHeap</code>结构体：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>first <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span>mh<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Pop:%d MinHeap:%v\n"</span><span class="token punctuation">,</span> first<span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>heap<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>mh<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Push:%d MinHeap:%v\n"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Push</code>函数将会按照以下图示过程添加新节点：</p><p><img src="/img/push_heap.png" alt="push_heap.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/push_heap.png" class="lozad post-image"></p><p>以上代码的输出将会是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.<span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap:<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Pop:1 MinHeap:<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Push:4 MinHeap:<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h3><p><code>heap</code>包的<code>Fix</code> 函数可在结构中某个节点的值被改变的时候使用。在这种情况下我们无需使用<code>Init</code>函数来重新构建整个结构，我们只需要将值改变了的节点向上/下移动到合适的位置，使整个结构再次符合要求。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Fix re-establishes the heap ordering after the element at index i has changed its value.</span><span class="token comment">// Changing the value of the element at index i and then calling Fix is equivalent to,</span><span class="token comment">// but less expensive than, calling Remove(h, i) followed by a Push of the new value.</span><span class="token comment">// The complexity is O(log n) where n = h.Len().</span><span class="token keyword">func</span> <span class="token function">Fix</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>down</code>函数会返回一个boolean值来表示在刚刚的操作中目标节点的位置是否发生了移动，如果没有，那么这个节点也许需要向上移动。</p><p>例如:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Changing one node of minHeap %v..\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap will be fixed:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>heap<span class="token punctuation">.</span><span class="token function">Fix</span><span class="token punctuation">(</span>mh<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap after fix:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Changing one node of minHeap %v..\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>heap<span class="token punctuation">.</span><span class="token function">Fix</span><span class="token punctuation">(</span>mh<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap after fix:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Fix</code>函数将会按照以下图示过程移动改变了的节点：</p><p><img src="/img/Fix_heap.png" alt="Fix_heap.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/Fix_heap.png" class="lozad post-image"></p><p>示例代码的输出将会是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Changing one node of minHeap <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap will be fixed:<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap after fix:<span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Changing one node of minHeap <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap after fix:<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a>Remove</h3><p><code>Remove</code> 函数有一点像是<code>Pop</code>和<code>Fix</code>函数的结合。</p><ul><li>它会首先缩短数组的长度来将最后的一个节点排除在未来的所有操作中。</li><li>然后将目标节点与最后一个节点交换位置。</li><li>由于目标节点所在的位置的值改变了，这个函数将会像<code>Fix</code>函数一样运行从而将整个结构调整到符合条件为止。</li><li>最后它将会取出最后一个节点，也就是目标节点。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Remove removes and returns the element at index i from the heap.</span><span class="token comment">// The complexity is O(log n) where n = h.Len().</span><span class="token keyword">func</span> <span class="token function">Remove</span><span class="token punctuation">(</span>h Interface<span class="token punctuation">,</span> i <span class="token builtin">int</span><span class="token punctuation">)</span> any <span class="token punctuation">&#123;</span>n <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">if</span> n <span class="token operator">!=</span> i <span class="token punctuation">&#123;</span>h<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">down</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">up</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token comment">//Remove</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] Removing one node from minHeap %v..\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span>elem <span class="token operator">:=</span> heap<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>mh<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[Heap] MinHeap after removing element %d :%v\n"</span><span class="token punctuation">,</span> elem<span class="token punctuation">,</span> <span class="token operator">*</span>mh<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Remove</code>函数将会如下图所示来移除节点：</p><p><img src="/img/Remove_heap.png" alt="Remove_heap.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/img/Remove_heap.png" class="lozad post-image"></p><p>示例代码的输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> Removing one node from minHeap <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">[</span>Heap<span class="token punctuation">]</span> MinHeap after removing element <span class="token number">2</span> :<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上就是所有的我想要谈论的关于<code>Heap</code>包的内容，完整的示例代码储存在这个仓库中：<a href="https://github.com/lz-nsc/go-example/tree/main/heap">lz-nsz/go-example/heap</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h2&gt;&lt;p&gt;&lt;code&gt;heap&lt;/code&gt;包中定义了接口&lt;code&gt;Interface&lt;/code&gt;。这个接口里有来自&lt;code&gt;sort&lt;/cod</summary>
      
    
    
    
    
    <category term="Golang" scheme="http://lzreload.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群搭建</title>
    <link href="http://lzreload.com/2021/09/14/Kubernetes%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://lzreload.com/2021/09/14/Kubernetes%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</id>
    <published>2021-09-14T06:35:42.000Z</published>
    <updated>2021-09-14T07:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这次打算尝试使用<code>kubeadm</code>来从头搭建一个<code>Kubernetes集群</code>，并且记录下整个过程以及中途遇到的问题。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>这次的搭建需要两台虚拟机，一台作为<code>Master节点</code>而另一台作为<code>Worker节点</code>, 方便后续进行更多的集群相关的测试。</p><p>云服务器：</p><ul><li>  AWS t2.large(2vCPU 8GiB) *2</li></ul><p>搭建工具：</p><ul><li>  kubeadm</li></ul><p>kubeadm 是一个可以帮助一键搭建 Kubernetes 集群的工具。</p><h1 id="搭建-Master-节点"><a href="#搭建-Master-节点" class="headerlink" title="搭建 Master 节点"></a>搭建 Master 节点</h1><h2 id="1-安装-kubeadm-以及相关工具"><a href="#1-安装-kubeadm-以及相关工具" class="headerlink" title="#1 安装 kubeadm 以及相关工具"></a>#1 安装 kubeadm 以及相关工具</h2><p>首先需要配置云服务器，安装需要的工具。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">apt-get</span> update<span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gnupg<span class="token variable">$curl</span> -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要将 Kubernetes 官方源添加到本地。</p><pre class="line-numbers language-none"><code class="language-none">#&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.listdeb http:&#x2F;&#x2F;apt.kubernetes.io&#x2F; kubernetes-xenial main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将以上文件（/etc/apt/sources.list.d/kubernetes.list）添加了之后，运行以下命令可以看到此时 Kubernetes 的源已经被添加进来。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">apt-get</span> update<span class="token punctuation">..</span>.Get:4 https://packages.cloud.google.com/apt kubernetes-xenial InRelease <span class="token punctuation">[</span><span class="token number">9383</span> B<span class="token punctuation">]</span>Get:6 https://packages.cloud.google.com/apt kubernetes-xenial/main amd64 Packages <span class="token punctuation">[</span><span class="token number">49.4</span> kB<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在完成了以上的配置之后即可开始安装<code>kubelet</code>，<code>kubectl</code>以及<code>kubeadm</code></p><p><code>kubeadm</code>需要使用<code>kubelet</code>服务来以容器方式部署和启动 Kubernetes 的主要服务，所以需要安装并先启动 kubelet 服务。<br>而<code>kubectl</code>则是客户端命令行工具，在集群搭建完成之后可以通过它查看集群信息与状态。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装kubelet，kubectl以及kubeadm</span><span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> kubelet kubectl kubeadm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要启动 kubelet 需要先安装并启动<code>docker</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$curl</span> -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -OK<span class="token comment"># 要安装了 software-properties-common 才能使用 add-apt-repository</span><span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> software-properties-common<span class="token variable">$sudo</span> add-apt-repository <span class="token punctuation">\</span><span class="token string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian \<span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> \stable"</span><span class="token variable">$sudo</span> <span class="token function">apt-get</span> update<span class="token comment"># 安装docker</span><span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成了以上所需工具的安装后就可以开始按顺序启动它们。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动docker</span><span class="token variable">$systemctl</span> start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 docker正常启动并确定docker的<code>cgroup driver</code>为<code>systemd</code>后（详情可见<code>错误及解决方案 #2</code>），可开始安装<code>Master节点</code>。</p><p>此时如果用<code>systemctl status kubelet</code>命令查看<code>kubelet</code>状态，可发现kubelet没有正常启动，报错为：</p><pre class="line-numbers language-none"><code class="language-none">&quot;Failed to load kubelet config file&quot; err&#x3D;&quot;failed to load Kubelet config file...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是因为还没有运行 <code>kubeadm init</code>命令，在这个命令运行了之后，<code>kubelet</code>的配置文件会被生成，<code>kubelet</code>也会自动重启并正常运行。</p><h2 id="2-使用-kubeadm-安装-Master-节点"><a href="#2-使用-kubeadm-安装-Master-节点" class="headerlink" title="#2 使用 kubeadm 安装 Master 节点"></a>#2 使用 kubeadm 安装 Master 节点</h2><p>使用<code>kubeadm config</code>命令打印<code>kubeadm</code>的默认配置.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#输出kubeadm默认配置</span><span class="token variable">$kubeadm</span> config print init-defaults<span class="token comment">#将kubeadm默认配置保存到文件中方便做自定义修改</span><span class="token variable">$kubeadm</span> config print init-defaults <span class="token operator">>></span> init.default.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以下是<code>kubeadm</code>打印出来的默认配置:</p><pre class="line-numbers language-none"><code class="language-none">#init.default.yamlapiVersion: kubeadm.k8s.io&#x2F;v1beta3bootstrapTokens:-   groups:    -   system:bootstrappers:kubeadm:default-node-token        token: abcdef.0123456789abcdef        ttl: 24h0m0s        usages:    -   signing    -   authentication        kind: InitConfiguration        localAPIEndpoint:        advertiseAddress: 1.2.3.4        bindPort: 6443        nodeRegistration:        criSocket: &#x2F;var&#x2F;run&#x2F;dockershim.sock        imagePullPolicy: IfNotPresent        name: node        taints: null---apiServer:timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io&#x2F;v1beta3certificatesDir: &#x2F;etc&#x2F;kubernetes&#x2F;pkiclusterName: kubernetescontrollerManager: &#123;&#125;dns: &#123;&#125;etcd:local:dataDir: &#x2F;var&#x2F;lib&#x2F;etcdimageRepository: k8s.gcr.iokind: ClusterConfigurationkubernetesVersion: 1.22.0networking:dnsDomain: cluster.localserviceSubnet: 10.96.0.0&#x2F;12scheduler: &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用以下命令可以查看镜像列表:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$kubeadm</span> config images listk8s.gcr.io/kube-apiserver:v1.22.1k8s.gcr.io/kube-controller-manager:v1.22.1k8s.gcr.io/kube-scheduler:v1.22.1k8s.gcr.io/kube-proxy:v1.22.1k8s.gcr.io/pause:3.5k8s.gcr.io/etcd:3.5.0-0k8s.gcr.io/coredns/coredns:v1.8.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>kubeadm config images pull</code>命令将这些镜像提前拉下来。就算不提前拉取，在后续步骤运行<code>kubeadm init</code>命令的时候也会自动进行拉取。</p><p>使用以下命令就可直接安装 Master 节点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> kubeadm init --pod-network-cidr<span class="token operator">=</span><span class="token number">172.30</span>.0.0/16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里注意一定要加上后面的<code>—pod-network-cidr</code>参数，否则在安装 flannel（网络插件）时会报以下错误：</p><pre class="line-numbers language-none"><code class="language-none">E0913 19:45:12.323393 1 main.go:293] Error registering network: failed to acquire lease: node &quot;ip-172-31-40-163&quot; pod cidr not assigned<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这次我没有修改默认的配置，如果有自定义配置，可以运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> kubeadm init –config<span class="token operator">=</span><span class="token operator">&lt;</span>config_file_path<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后会得到以下相关提示:</p><pre class="line-numbers language-none"><code class="language-none">Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:mkdir -p $HOME&#x2F;.kube  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;configAlternatively, if you are the root user, you can run:export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.confYou should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;Then you can join any number of worker nodes by running the following on each as root:kubeadm join 172.31.40.163:6443 --token 61gwee.be4wj16mlyjsahaj \ --discovery-token-ca-cert-hash sha256:97ea59547a4cca2fbcf62360b3561c6e27dd4e1a294533505490391dab872daf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据提示可以运行以下命令，这些命令是为了方便用户通过<code>kubectl</code>访问集群，<code>config</code>文件里配置了访问集群的入口，用户以及 token 等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube<span class="token variable">$sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token variable">$sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完成配置后就可以使用 kubectl 访问集群了。</p><p>使用<code>kubectl get node</code>可以看到，目前<code>master node</code>的状态是<code>Not Ready</code>。</p><pre class="line-numbers language-none"><code class="language-none">NAME             STATUS     ROLES                AGE    VERSIONip-172-31-40-163 NotReady   control-plane,master 14m    v1.22.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用<code>kubectl get node &lt;node_name&gt; -o yaml</code>(或者<code>kubectl describe node &lt;node_name&gt;</code>)可以查看具体原因：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">...</span><span class="token key atrule">message</span><span class="token punctuation">:</span> 'container runtime network not ready<span class="token punctuation">:</span> NetworkReady=false reason<span class="token punctuation">:</span>NetworkPluginNotReady<span class="token key atrule">message:docker</span><span class="token punctuation">:</span> <span class="token key atrule">network plugin is not ready</span><span class="token punctuation">:</span> cni config uninitialized'<span class="token key atrule">reason</span><span class="token punctuation">:</span> KubeletNotReady<span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">"False"</span><span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是由于<code>kubeadm</code>的安装过程<strong>不涉及</strong><code>网络插件（CNI)</code>的初始化，所以集群没有网络功能。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$kubectl</span> get pod --all-namespacesNAMESPACE   NAME                        READY   STATUS  RESTARTS AGEkube-system coredns-78fcd69978-59b4t     <span class="token number">0</span>/1     Pending <span class="token number">0</span>       10mkube-system coredns-78fcd69978-hc8qn     <span class="token number">0</span>/1     Pending <span class="token number">0</span>       10mkube-system etcd-ip-172-31-40-163        <span class="token number">1</span>/1     Running <span class="token number">3</span>       10mkube-system kube-apiserver-ip-172-<span class="token punctuation">..</span>.    <span class="token number">1</span>/1     Running <span class="token number">2</span>       10mkube-system kube-controller-manager-<span class="token punctuation">..</span>.  <span class="token number">1</span>/1     Running <span class="token number">2</span>       10mkube-system kube-proxy-dzklf             <span class="token number">1</span>/1     Running <span class="token number">0</span>       10mkube-system kube-scheduler-ip-172-<span class="token punctuation">..</span>.    <span class="token number">1</span>/1     Running <span class="token number">3</span>       10m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以观察到<code>kubadm</code>已经为<code>master 节点</code>启动了<code>coredns</code>,<code>etcd</code>,<code>kube-apiserver</code>,<code>kube-controller-manager</code>,<code>kube-proxy</code>以及 <code>kube-scheduler</code>了。<br>并且与网络相关<code>coredns</code>由于没有网络也无法正常启动。</p><h2 id="3-安装网络插件-Flannel"><a href="#3-安装网络插件-Flannel" class="headerlink" title="#3 安装网络插件 Flannel"></a>#3 安装网络插件 Flannel</h2><p>首先下载在 Kubernetes 集群内安装<code>flanner</code>所需的配置文件，里面包括了启动该服务所需的所有资源的配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$wget</span> https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用下载的 Yaml 文件在集群内启动所有相关资源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$kubectl</span> apply -f kube-flannel.ymlpodsecuritypolicy.policy/psp.flannel.unprivileged createdclusterrole.rbac.authorization.k8s.io/flannel createdclusterrolebinding.rbac.authorization.k8s.io/flannel createdserviceaccount/flannel createdconfigmap/kube-flannel-cfg createddaemonset.apps/kube-flannel-ds created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在查看<code>pod</code>的状态可以发现所有的<code>pod</code>都正常运行(<code>Running</code>)中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl get pod --all-namespacesNAMESPACE NAME READY STATUS RESTARTS AGEkube-system coredns-78fcd69978-xx27f <span class="token number">1</span>/1 Running <span class="token number">0</span> 3m40skube-system coredns-78fcd69978-zxnw5 <span class="token number">1</span>/1 Running <span class="token number">0</span> 3m40skube-system etcd-ip-172-31-40-163 <span class="token number">1</span>/1 Running <span class="token number">4</span> 3m54skube-system kube-apiserver-ip-172-31-40-163 <span class="token number">1</span>/1 Running <span class="token number">3</span> 3m54skube-system kube-controller-manager-ip-172-31-40-163 <span class="token number">1</span>/1 Running <span class="token number">0</span> 3m57skube-system kube-flannel-ds-26tcn <span class="token number">1</span>/1 Running <span class="token number">0</span> 5skube-system kube-proxy-8c4md <span class="token number">1</span>/1 Running <span class="token number">0</span> 3m40skube-system kube-scheduler-ip-172-31-40-163 <span class="token number">1</span>/1 Running <span class="token number">4</span> 3m54s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而<code>master 节点</code>也切换到了<code>Ready</code>的状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl get nodeNAME                STATUS  ROLES                   AGE     VERSIONip-172-31-40-163    Ready   control-plane,master    4m47s   v1.22.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="搭建-Node-节点"><a href="#搭建-Node-节点" class="headerlink" title="搭建 Node 节点"></a>搭建 Node 节点</h1><p>重复以上在<code>Master节点</code>中安装<code>kubeadm</code>等工具的过程。</p><p>运行<code>kubeadm</code>在<code>Master 节点</code>安装完成后返回的将<code>worker 节点</code>加入集群的命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$kubeadm</span> <span class="token function">join</span> <span class="token number">172.31</span>.40.163:6443 --token 61gwee.be4wj16mlyjsahaj <span class="token punctuation">\</span> --discovery-token-ca-cert-hash sha256:97ea59547a4cca2fbcf62360b3561c6e27dd4e1a294533505490391dab872daf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在创建 <code>Master节点</code>后忘记了以上命令及token，则可用<code>kubeadm token create --print-join-command</code>命令重新生成token并输出完整的<code>join</code>命令。</p><p>在以上命令成功运行后，在<code>Master节点</code>通过<code>kubectl get node</code>可观察到，集群已有两个节点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$kubectl</span> get nodeNAME               STATUS   ROLES                  AGE   VERSIONip-172-31-40-163   Ready    control-plane,master   23h   v1.22.1ip-172-31-47-241   Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>                 15s   v1.22.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="错误及解决方案"><a href="#错误及解决方案" class="headerlink" title="错误及解决方案"></a>错误及解决方案</h1><h2 id="1-docker-连接-Docker-daemon-socket-失败"><a href="#1-docker-连接-Docker-daemon-socket-失败" class="headerlink" title="#1 docker 连接 Docker daemon socket 失败"></a>#1 docker 连接 Docker daemon socket 失败</h2><p>运行<code>docker info</code>命令时得到以下错误：</p><pre class="line-numbers language-none"><code class="language-none">ERROR: Got permission denied while trying to connect to the Docker daemon socket ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要确认 docker 组已经创建并且当前使用的用户在这个组内。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">groupadd</span> docker<span class="token variable">$sudo</span> gpasswd -a <span class="token operator">&lt;</span>username<span class="token operator">></span> docker<span class="token variable">$newgrp</span> docker<span class="token variable">$systemctl</span> restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上步骤后，再次运行<code>docker info</code>命令可以正确得到所需信息。</p><h2 id="2-Kubelet-启动失败"><a href="#2-Kubelet-启动失败" class="headerlink" title="#2 Kubelet 启动失败"></a>#2 Kubelet 启动失败</h2><p>用<code>systemctl status kubelet</code>命令获得进程号后，再用<code>journalctl \_PID=&lt;进程号&gt;|vim – </code>查看日志，获得了以下信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Sep <span class="token number">13</span> <span class="token number">17</span>:30:09 ip-172-31-40-163 kubelet<span class="token punctuation">[</span><span class="token number">18094</span><span class="token punctuation">]</span>: E0913 <span class="token number">17</span>:30:09.620375 <span class="token number">18094</span> server.go:294<span class="token punctuation">]</span> <span class="token string">"Failed to run kubelet"</span> <span class="token assign-left variable">err</span><span class="token operator">=</span><span class="token string">"failed to run Kubelet: misconfiguration: kubelet cgroup driver: <span class="token entity" title="\&quot;">\"</span>systemd<span class="token entity" title="\&quot;">\"</span> is different from docker cgroup driver: <span class="token entity" title="\&quot;">\"</span>cgroupfs<span class="token entity" title="\&quot;">\"</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因是<code>docker</code>和<code>kubelet</code>使用的<code>cgroup driver</code>不一样，一个是<code>systemd</code>，一个是<code>cgroupfs</code>。根据 Kubernetes 官网文档：</p><blockquote><p><code>systemd driver</code> is <strong>recommended</strong> for <code>kubeadm</code> based setups instead of the <code>cgroupfs driver</code>, because kubeadm manages the kubelet as a systemd service.</p></blockquote><p><code>systemd</code>是比较推荐的,也是 kubeadm 默认设置的 cgroup drive。（据说 systemd 更安全）所以这里我统一设置成使用 systemd。也就是需要把 <code>docker</code> 的<code>cgroup driver</code>更改成<code>systemd</code></p><p>修改<code>/etc/docker/daemon.json</code>（或创建）</p><pre class="line-numbers language-none"><code class="language-none">#&#x2F;etc&#x2F;docker&#x2F;daemon.json&#123;&quot;exec-opts&quot;:[&quot;native.cgroupdriver&#x3D;systemd&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在完成修改之后，用以下命令更新配置并重启 docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$systemctl</span> daemon-reload<span class="token variable">$systemctl</span> restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启后使用<code>docker info</code>命令可获得 docker 的所有相关信息,可以确认 docker 的<code>cgroup driver</code>已经换成了<code>systemd</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker info<span class="token punctuation">..</span>.Logging Driver: json-fileCgroup Driver: systemdCgroup Version: <span class="token number">1</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时再确认 kubelet 的状态可以看到 kubelet 已经自动重启并正常运行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次打算尝试使用&lt;code&gt;kubeadm&lt;/code&gt;来从头搭建一个&lt;code&gt;Kubernetes集群&lt;/code&gt;，并且记录下整个过程以及中途遇到的问题。&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="Kubernetes" scheme="http://lzreload.com/tags/Kubernetes/"/>
    
  </entry>
  
</feed>
