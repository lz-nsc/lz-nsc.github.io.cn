<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lynn&#39;s Blog</title>
  
  
  <link href="http://lzreload.com/atom.xml" rel="self"/>
  
  <link href="http://lzreload.com/"/>
  <updated>2021-09-14T07:24:00.000Z</updated>
  <id>http://lzreload.com/</id>
  
  <author>
    <name>Lynn Zhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes集群搭建</title>
    <link href="http://lzreload.com/2021/09/14/Kubernetes%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://lzreload.com/2021/09/14/Kubernetes%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</id>
    <published>2021-09-14T06:35:42.000Z</published>
    <updated>2021-09-14T07:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这次打算尝试使用<code>kubeadm</code>来从头搭建一个<code>Kubernetes集群</code>，并且记录下整个过程以及中途遇到的问题。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>这次的搭建需要两台虚拟机，一台作为<code>Master节点</code>而另一台作为<code>Node节点</code>方便后续进行更多的集群相关的测试。</p><p>云服务器：</p><ul><li>  AWS t2.large(2vCPU 8GiB) *2</li></ul><p>搭建工具：</p><ul><li>  kubeadm</li></ul><p>kubeadm 是一个可以帮助一键搭建 Kubernetes 集群的工具。</p><h1 id="搭建-Master-节点"><a href="#搭建-Master-节点" class="headerlink" title="搭建 Master 节点"></a>搭建 Master 节点</h1><h2 id="1-安装-kubeadm-以及相关工具"><a href="#1-安装-kubeadm-以及相关工具" class="headerlink" title="#1 安装 kubeadm 以及相关工具"></a>#1 安装 kubeadm 以及相关工具</h2><p>首先需要配置云服务器，安装需要的工具。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">apt-get</span> update<span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gnupg<span class="token variable">$curl</span> -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要将 Kubernetes 官方源添加到本地。</p><pre class="line-numbers language-none"><code class="language-none">#&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.listdeb http:&#x2F;&#x2F;apt.kubernetes.io&#x2F; kubernetes-xenial main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将以上文件（/etc/apt/sources.list.d/kubernetes.list）添加了之后，运行以下命令可以看到此时 Kubernetes 的源已经被添加进来。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">apt-get</span> update<span class="token punctuation">..</span>.Get:4 https://packages.cloud.google.com/apt kubernetes-xenial InRelease <span class="token punctuation">[</span><span class="token number">9383</span> B<span class="token punctuation">]</span>Get:6 https://packages.cloud.google.com/apt kubernetes-xenial/main amd64 Packages <span class="token punctuation">[</span><span class="token number">49.4</span> kB<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在完成了以上的配置之后即可开始安装<code>kubelet</code>，<code>kubectl</code>以及<code>kubeadm</code></p><p><code>kubeadm</code>需要使用<code>kubelet</code>服务来以容器方式部署和启动 Kubernetes 的主要服务，所以需要安装并先启动 kubelet 服务。<br>而<code>kubectl</code>则是客户端命令行工具，在集群搭建完成之后可以通过它查看集群信息与状态。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装kubelet，kubectl以及kubeadm</span><span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> kubelet kubectl kubeadm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要启动 kubelet 需要先安装并启动<code>docker</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$curl</span> -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -OK<span class="token comment"># 要安装了 software-properties-common 才能使用 add-apt-repository</span><span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> software-properties-common<span class="token variable">$sudo</span> add-apt-repository <span class="token punctuation">\</span><span class="token string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian \<span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> \stable"</span><span class="token variable">$sudo</span> <span class="token function">apt-get</span> update<span class="token comment"># 安装docker</span><span class="token variable">$sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成了以上所需工具的安装后就可以开始按顺序启动它们。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动docker</span><span class="token variable">$systemctl</span> start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 docker正常启动并确定docker的<code>cgroup driver</code>为<code>systemd</code>后（详情可见<code>错误及解决方案 #2</code>），可开始安装<code>Master节点</code>。</p><p>此时如果用<code>systemctl status kubelet</code>命令查看<code>kubelet</code>状态，可发现kubelet没有正常启动，报错为：</p><pre class="line-numbers language-none"><code class="language-none">&quot;Failed to load kubelet config file&quot; err&#x3D;&quot;failed to load Kubelet config file...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是因为还没有运行 <code>kubeadm init</code>命令，在这个命令运行了之后，<code>kubelet</code>的配置文件会被生成，<code>kubelet</code>也会自动重启并正常运行。</p><h2 id="2-使用-kubeadm-安装-Master-节点"><a href="#2-使用-kubeadm-安装-Master-节点" class="headerlink" title="#2 使用 kubeadm 安装 Master 节点"></a>#2 使用 kubeadm 安装 Master 节点</h2><p>使用<code>kubeadm config</code>命令打印<code>kubeadm</code>的默认配置.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#输出kubeadm默认配置</span><span class="token variable">$kubeadm</span> config print init-defaults<span class="token comment">#将kubeadm默认配置保存到文件中方便做自定义修改</span><span class="token variable">$kubeadm</span> config print init-defaults <span class="token operator">>></span> init.default.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以下是<code>kubeadm</code>打印出来的默认配置:</p><pre class="line-numbers language-none"><code class="language-none">#init.default.yamlapiVersion: kubeadm.k8s.io&#x2F;v1beta3bootstrapTokens:-   groups:    -   system:bootstrappers:kubeadm:default-node-token        token: abcdef.0123456789abcdef        ttl: 24h0m0s        usages:    -   signing    -   authentication        kind: InitConfiguration        localAPIEndpoint:        advertiseAddress: 1.2.3.4        bindPort: 6443        nodeRegistration:        criSocket: &#x2F;var&#x2F;run&#x2F;dockershim.sock        imagePullPolicy: IfNotPresent        name: node        taints: null---apiServer:timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io&#x2F;v1beta3certificatesDir: &#x2F;etc&#x2F;kubernetes&#x2F;pkiclusterName: kubernetescontrollerManager: &#123;&#125;dns: &#123;&#125;etcd:local:dataDir: &#x2F;var&#x2F;lib&#x2F;etcdimageRepository: k8s.gcr.iokind: ClusterConfigurationkubernetesVersion: 1.22.0networking:dnsDomain: cluster.localserviceSubnet: 10.96.0.0&#x2F;12scheduler: &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用以下命令可以查看镜像列表:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$kubeadm</span> config images listk8s.gcr.io/kube-apiserver:v1.22.1k8s.gcr.io/kube-controller-manager:v1.22.1k8s.gcr.io/kube-scheduler:v1.22.1k8s.gcr.io/kube-proxy:v1.22.1k8s.gcr.io/pause:3.5k8s.gcr.io/etcd:3.5.0-0k8s.gcr.io/coredns/coredns:v1.8.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>kubeadm config images pull</code>命令将这些镜像提前拉下来。就算不提前拉取，在后续步骤运行<code>kubeadm init</code>命令的时候也会自动进行拉取。</p><p>使用以下命令就可直接安装 Master 节点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> kubeadm init --pod-network-cidr<span class="token operator">=</span><span class="token number">172.30</span>.0.0/16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里注意一定要加上后面的<code>—pod-network-cidr</code>参数，否则在安装 flannel（网络插件）时会报以下错误：</p><pre class="line-numbers language-none"><code class="language-none">E0913 19:45:12.323393 1 main.go:293] Error registering network: failed to acquire lease: node &quot;ip-172-31-40-163&quot; pod cidr not assigned<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这次我没有修改默认的配置，如果有自定义配置，可以运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> kubeadm init –config<span class="token operator">=</span><span class="token operator">&lt;</span>config_file_path<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后会得到以下相关提示:</p><pre class="line-numbers language-none"><code class="language-none">Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:mkdir -p $HOME&#x2F;.kube  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;configAlternatively, if you are the root user, you can run:export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.confYou should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;Then you can join any number of worker nodes by running the following on each as root:kubeadm join 172.31.40.163:6443 --token 61gwee.be4wj16mlyjsahaj \ --discovery-token-ca-cert-hash sha256:97ea59547a4cca2fbcf62360b3561c6e27dd4e1a294533505490391dab872daf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据提示可以运行以下命令，这些命令是为了方便用户通过<code>kubectl</code>访问集群，<code>config</code>文件里配置了访问集群的入口，用户以及 token 等。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube<span class="token variable">$sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token variable">$sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完成配置后就可以使用 kubectl 访问集群了。</p><p>使用<code>kubectl get node</code>可以看到，目前<code>master node</code>的状态是<code>Not Ready</code>。</p><pre class="line-numbers language-none"><code class="language-none">NAME             STATUS     ROLES                AGE    VERSIONip-172-31-40-163 NotReady   control-plane,master 14m    v1.22.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用<code>kubectl get node &lt;node_name&gt; -o yaml</code>(或者<code>kubectl describe node &lt;node_name&gt;</code>)可以查看具体原因：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">...</span><span class="token key atrule">message</span><span class="token punctuation">:</span> 'container runtime network not ready<span class="token punctuation">:</span> NetworkReady=false reason<span class="token punctuation">:</span>NetworkPluginNotReady<span class="token key atrule">message:docker</span><span class="token punctuation">:</span> <span class="token key atrule">network plugin is not ready</span><span class="token punctuation">:</span> cni config uninitialized'<span class="token key atrule">reason</span><span class="token punctuation">:</span> KubeletNotReady<span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">"False"</span><span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是由于<code>kubeadm</code>的安装过程<strong>不涉及</strong><code>网络插件（CNI)</code>的初始化，所以集群没有网络功能。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$kubectl</span> get pod --all-namespacesNAMESPACE   NAME                        READY   STATUS  RESTARTS AGEkube-system coredns-78fcd69978-59b4t     <span class="token number">0</span>/1     Pending <span class="token number">0</span>       10mkube-system coredns-78fcd69978-hc8qn     <span class="token number">0</span>/1     Pending <span class="token number">0</span>       10mkube-system etcd-ip-172-31-40-163        <span class="token number">1</span>/1     Running <span class="token number">3</span>       10mkube-system kube-apiserver-ip-172-<span class="token punctuation">..</span>.    <span class="token number">1</span>/1     Running <span class="token number">2</span>       10mkube-system kube-controller-manager-<span class="token punctuation">..</span>.  <span class="token number">1</span>/1     Running <span class="token number">2</span>       10mkube-system kube-proxy-dzklf             <span class="token number">1</span>/1     Running <span class="token number">0</span>       10mkube-system kube-scheduler-ip-172-<span class="token punctuation">..</span>.    <span class="token number">1</span>/1     Running <span class="token number">3</span>       10m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以观察到<code>kubadm</code>已经为<code>master 节点</code>启动了<code>coredns</code>,<code>etcd</code>,<code>kube-apiserver</code>,<code>kube-controller-manager</code>,<code>kube-proxy</code>以及 <code>kube-scheduler</code>了。<br>并且与网络相关<code>coredns</code>由于没有网络也无法正常启动。</p><h2 id="3-安装网络插件-Flannel"><a href="#3-安装网络插件-Flannel" class="headerlink" title="#3 安装网络插件 Flannel"></a>#3 安装网络插件 Flannel</h2><p>首先下载在 Kubernetes 集群内安装<code>flanner</code>所需的配置文件，里面包括了启动该服务所需的所有资源的配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$wget</span> https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用下载的 Yaml 文件在集群内启动所有相关资源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$kubectl</span> apply -f kube-flannel.ymlpodsecuritypolicy.policy/psp.flannel.unprivileged createdclusterrole.rbac.authorization.k8s.io/flannel createdclusterrolebinding.rbac.authorization.k8s.io/flannel createdserviceaccount/flannel createdconfigmap/kube-flannel-cfg createddaemonset.apps/kube-flannel-ds created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在查看<code>pod</code>的状态可以发现所有的<code>pod</code>都正常运行(<code>Running</code>)中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl get pod --all-namespacesNAMESPACE NAME READY STATUS RESTARTS AGEkube-system coredns-78fcd69978-xx27f <span class="token number">1</span>/1 Running <span class="token number">0</span> 3m40skube-system coredns-78fcd69978-zxnw5 <span class="token number">1</span>/1 Running <span class="token number">0</span> 3m40skube-system etcd-ip-172-31-40-163 <span class="token number">1</span>/1 Running <span class="token number">4</span> 3m54skube-system kube-apiserver-ip-172-31-40-163 <span class="token number">1</span>/1 Running <span class="token number">3</span> 3m54skube-system kube-controller-manager-ip-172-31-40-163 <span class="token number">1</span>/1 Running <span class="token number">0</span> 3m57skube-system kube-flannel-ds-26tcn <span class="token number">1</span>/1 Running <span class="token number">0</span> 5skube-system kube-proxy-8c4md <span class="token number">1</span>/1 Running <span class="token number">0</span> 3m40skube-system kube-scheduler-ip-172-31-40-163 <span class="token number">1</span>/1 Running <span class="token number">4</span> 3m54s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而<code>master 节点</code>也切换到了<code>Ready</code>的状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl get nodeNAME                STATUS  ROLES                   AGE     VERSIONip-172-31-40-163    Ready   control-plane,master    4m47s   v1.22.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="搭建-Node-节点"><a href="#搭建-Node-节点" class="headerlink" title="搭建 Node 节点"></a>搭建 Node 节点</h1><p>重复以上在<code>Master节点</code>中安装<code>kubeadm</code>等工具的过程。</p><p>运行<code>kubeadm</code>在<code>Master 节点</code>安装完成后返回的将<code>worker 节点</code>加入集群的命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$kubeadm</span> <span class="token function">join</span> <span class="token number">172.31</span>.40.163:6443 --token 61gwee.be4wj16mlyjsahaj <span class="token punctuation">\</span> --discovery-token-ca-cert-hash sha256:97ea59547a4cca2fbcf62360b3561c6e27dd4e1a294533505490391dab872daf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在创建 <code>Master节点</code>后忘记了以上命令及token，则可用<code>kubeadm token create --print-join-command</code>命令重新生成token并输出完整的<code>join</code>命令。</p><p>在以上命令成功运行后，在<code>Master节点</code>通过<code>kubectl get node</code>可观察到，集群已有两个节点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$kubectl</span> get nodeNAME               STATUS   ROLES                  AGE   VERSIONip-172-31-40-163   Ready    control-plane,master   23h   v1.22.1ip-172-31-47-241   Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>                 15s   v1.22.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="错误及解决方案"><a href="#错误及解决方案" class="headerlink" title="错误及解决方案"></a>错误及解决方案</h1><h2 id="1-docker-连接-Docker-daemon-socket-失败"><a href="#1-docker-连接-Docker-daemon-socket-失败" class="headerlink" title="#1 docker 连接 Docker daemon socket 失败"></a>#1 docker 连接 Docker daemon socket 失败</h2><p>运行<code>docker info</code>命令时得到以下错误：</p><pre class="line-numbers language-none"><code class="language-none">ERROR: Got permission denied while trying to connect to the Docker daemon socket ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要确认 docker 组已经创建并且当前使用的用户在这个组内。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">groupadd</span> docker<span class="token variable">$sudo</span> gpasswd -a <span class="token operator">&lt;</span>username<span class="token operator">></span> docker<span class="token variable">$newgrp</span> docker<span class="token variable">$systemctl</span> restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上步骤后，再次运行<code>docker info</code>命令可以正确得到所需信息。</p><h2 id="2-Kubelet-启动失败"><a href="#2-Kubelet-启动失败" class="headerlink" title="#2 Kubelet 启动失败"></a>#2 Kubelet 启动失败</h2><p>用<code>systemctl status kubelet</code>命令获得进程号后，再用<code>journalctl \_PID=&lt;进程号&gt;|vim – </code>查看日志，获得了以下信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Sep <span class="token number">13</span> <span class="token number">17</span>:30:09 ip-172-31-40-163 kubelet<span class="token punctuation">[</span><span class="token number">18094</span><span class="token punctuation">]</span>: E0913 <span class="token number">17</span>:30:09.620375 <span class="token number">18094</span> server.go:294<span class="token punctuation">]</span> <span class="token string">"Failed to run kubelet"</span> <span class="token assign-left variable">err</span><span class="token operator">=</span><span class="token string">"failed to run Kubelet: misconfiguration: kubelet cgroup driver: <span class="token entity" title="\&quot;">\"</span>systemd<span class="token entity" title="\&quot;">\"</span> is different from docker cgroup driver: <span class="token entity" title="\&quot;">\"</span>cgroupfs<span class="token entity" title="\&quot;">\"</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因是<code>docker</code>和<code>kubelet</code>使用的<code>cgroup driver</code>不一样，一个是<code>systemd</code>，一个是<code>cgroupfs</code>。根据 Kubernetes 官网文档：</p><blockquote><p><code>systemd driver</code> is <strong>recommended</strong> for <code>kubeadm</code> based setups instead of the <code>cgroupfs driver</code>, because kubeadm manages the kubelet as a systemd service.</p></blockquote><p><code>systemd</code>是比较推荐的,也是 kubeadm 默认设置的 cgroup drive。（据说 systemd 更安全）所以这里我统一设置成使用 systemd。也就是需要把 <code>docker</code> 的<code>cgroup driver</code>更改成<code>systemd</code></p><p>修改<code>/etc/docker/daemon.json</code>（或创建）</p><pre class="line-numbers language-none"><code class="language-none">#&#x2F;etc&#x2F;docker&#x2F;daemon.json&#123;&quot;exec-opts&quot;:[&quot;native.cgroupdriver&#x3D;systemd&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在完成修改之后，用以下命令更新配置并重启 docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$systemctl</span> daemon-reload<span class="token variable">$systemctl</span> restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启后使用<code>docker info</code>命令可获得 docker 的所有相关信息,可以确认 docker 的<code>cgroup driver</code>已经换成了<code>systemd</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker info<span class="token punctuation">..</span>.Logging Driver: json-fileCgroup Driver: systemdCgroup Version: <span class="token number">1</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时再确认 kubelet 的状态可以看到 kubelet 已经自动重启并正常运行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次打算尝试使用&lt;code&gt;kubeadm&lt;/code&gt;来从头搭建一个&lt;code&gt;Kubernetes集群&lt;/code&gt;，并且记录下整个过程以及中途遇到的问题。&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="Kubernetes" scheme="http://lzreload.com/tags/Kubernetes/"/>
    
  </entry>
  
</feed>
